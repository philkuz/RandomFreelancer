package com.philkuz.javadrive;

import java.io.*;
import java.util.*;
import static java.nio.file.StandardWatchEventKinds.*;
import static java.nio.file.LinkOption.*;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;

public class DirWatch {
	private final WatchService watcher;
    private final Map<WatchKey,Path> keys;
    private final WindowHandler window;
    
    private boolean trace = false;
    
    /**
     * Register the given directory with the WatchService
     */
    private void register(Path dir) throws IOException {
        WatchKey key = dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);
        if (trace) {
            Path prev = keys.get(key);
            if (prev == null) {
                System.out.format("register: %s\n", dir);
            } else {
                if (!dir.equals(prev)) {
                    System.out.format("update: %s -> %s\n", prev, dir);
                }
            }
        }
        keys.put(key, dir);
    }
    /**
     * Register the given directory, and all its sub-directories, with the
     * WatchService.
     */
    private void registerAll(final Path start) throws IOException {
        // register directory and sub-directories
        Files.walkFileTree(start, new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
                throws IOException
            {
                register(dir);
                return FileVisitResult.CONTINUE;
            }
        });
    }
	DirWatch(Path dir, WindowHandler wHandler) throws IOException
	{
		this.watcher = FileSystems.getDefault().newWatchService();
		this.keys = new HashMap<WatchKey, Path>();
		this.window = wHandler;
		System.out.format("Scanning %s ...\n", dir);
        registerAll(dir);
        System.out.println("Done.");
	}
	void processEvents() {
        for (;;) {
 
            // wait for key to be signalled
            WatchKey key;
            try {
                key = watcher.take();
            } catch (InterruptedException x) {
                return;
            }
 
            Path dir = keys.get(key);
            if (dir == null) {
                System.err.println("WatchKey not recognized!!");
                continue;
            }
 
            for (WatchEvent<?> event: key.pollEvents()) {
                @SuppressWarnings("rawtypes")
				WatchEvent.Kind kind = event.kind();
 
                // Context for directory entry event is the file name of entry
                WatchEvent<Path> ev = cast(event);
                Path name = ev.context();
                Path child = dir.resolve(name);
 
                // print out event
                
                /*Here's all of the action registration*/

                if (kind == ENTRY_CREATE) {
                	// registers all new children of any created directories
                    try {
                        if (Files.isDirectory(child, NOFOLLOW_LINKS)) {
                            registerAll(child);
                        }
                    } catch (IOException x) {}
                    //the action you want to perform when this happens
                    entryCreate(child);
                }
                else if(kind == ENTRY_MODIFY) {
                	entryModify(child);
                }
                else if(kind == ENTRY_DELETE){
                	entryDelete(child);
                }
            }
 
            // reset key and remove from set if directory no longer accessible
            boolean valid = key.reset();
            if (!valid) {
                keys.remove(key);
 
                // all directories are inaccessible
                if (keys.isEmpty()) {
                    break;
                }
            }
        }
    }
	 @SuppressWarnings("unchecked")
	    static <T> WatchEvent<T> cast(WatchEvent<?> event) {
	        return (WatchEvent<T>)event;
	    }
	 private void writeLog(String line)
	 {
		 window.addLog(line);
	 }
	 private void entryCreate(Path dir){
		 //// TODO: Call a method when entry is created
		 String log = String.format("Created \'%s\' in \'%s\'\n", dir.getFileName(), dir.getParent());
		 writeLog(log);
	 }
	 private void entryModify(Path dir){
		 //// TODO: Call a method when entry is modified
		 String log = String.format("Modified \'%s\' in \'%s\'\n", dir.getFileName(), dir.getParent());
		 writeLog(log);
	 }
	 private void entryDelete(Path dir){
		 //// TODO: Call a method when entry is deleted
		 String log = String.format("Deleted \'%s\' in \'%s\'\n", dir.getFileName(), dir.getParent());
		 writeLog(log);
		 
	 }
	 
}
